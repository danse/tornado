#!/usr/bin/python
from string import Template
import logging
import sys
import optparse

from vishnje.history import history
from vishnje.launch import launch

options, args = optparse.OptionParser().parse_args()

template = Template('''
<!DOCTYPE html>
<html>
  <head>
    <!--<meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="expires" content="0" />-->
    <title>tornado average visualization</title>
    <!--script type="text/javascript" src="static/d3-v1.8.2.js"></script-->
    <script type="text/javascript" src="http://d3js.org/d3.v2.min.js"></script>
    <style type="text/css">
        /*
        .chart div {
            font: 10px sans-serif;
            background-color: steelblue;
            text-align: right;
            padding: 3px;
            margin: 1px;
            color: white;
        }

        circle {
            stroke: white;
            fill: steelblue;
        }

        text {
            fill: white;
            font-size: 13px;
        }
        */
    </style>

    
  </head>
  <body>
        <script type="text/javascript">
        
        var bound = $bound
        var data = $data
        var w = 600
        var h = 20
        var biggest_label_size = 100
        var chart = d3.select('body').append('svg')
            .attr('width', w + h + biggest_label_size)
            .attr('height', h * data.length)
        function draw(){
            var x_scale    = d3.scale.linear().domain([bound - d3.max(data), bound - d3.min(data)]).range([0, w]);
            var size_scale = d3.scale.linear().domain([0, data.length]).range([1, 50]);
            var g = chart.selectAll('g')
                .data(data)
                .enter().append('g')
                .attr('transform', function(d, i){
                    return 'translate('+x_scale(bound - d)+', '+(i*h)+')';
                    });

            g.append('circle')
                .attr('r', function(d, i){
                    return size_scale(data.length - i);
                })
                .style('fill', function(d){
                    if(d>bound){
                        return 'red';
                    }
                    else{
                        return 'steelblue';
                    }
                })
                .style('fill-opacity', 0.5);

            g.append('text')
                .text(function(d, i){return d3.round(bound - d) ;}).attr('x', 40);
            g.append('text')
                .text(function(d, i){return (data.length - i) ;}).attr('fill', 'grey');

            window.scrollTo(0,1000000);
        }
        window.onload = draw
        </script>
        <!--input type='button' onclick='draw()' /-->
        <!--div name='chart' class='chart' /-->
  </body>
</html>
''')

logging.basicConfig(level=logging.INFO)

data = [float(line) for line in sys.stdin]
data = [r for r in reversed(history(reversed(data)))]

javascript_data = repr(data)

logging.debug(data)

page = template.safe_substitute(data=javascript_data, bound=args[0])

logging.debug(page)

launch(page)
